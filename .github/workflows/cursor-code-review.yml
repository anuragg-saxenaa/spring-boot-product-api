name: Cursor CLI â€“ PR Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Get PR diff
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr diff ${{ github.event.pull_request.number }} > pr_diff.txt
          echo "PR diff saved to pr_diff.txt"

      - name: Perform code review
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GH_TOKEN: ${{ github.token }}
        timeout-minutes: 2
        run: |
          # Use timeout and pipe to prevent hanging
          echo "Review this Java Spring Boot PR diff and post INLINE comments on specific lines of code.

          PR: ${{ github.event.pull_request.number }} in ${{ github.repository }}

          CRITICAL: Use INLINE comments, NOT summary comments!

          Steps:
          1. Read the diff: cat pr_diff.txt
          2. Find 5 critical issues in the code
          3. For each issue, post an INLINE comment on the exact line using:
             gh pr review ${{ github.event.pull_request.number }} --body 'inline comment text' --path 'file/path' --line LINE_NUMBER
          4. Do NOT use general --comment flag
          5. Exit after posting inline comments

          Example commands:
          gh pr review ${{ github.event.pull_request.number }} --body 'ðŸ”’ SQL injection vulnerability: Use parameterized queries' --path 'src/main/java/...' --line 35
          gh pr review ${{ github.event.pull_request.number }} --body 'âš¡ N+1 query detected: Optimize with JOIN' --path 'src/main/java/...' --line 67

          Focus: ðŸ”’ Security, âš¡ Performance, âœ¨ Best practices
          Format: Specific line-by-line feedback with file paths and line numbers" | timeout 90 cursor-agent --force --model "auto" --output-format=text || echo "Review completed or timed out"

      - name: Cleanup and confirm completion
        run: |
          rm -f pr_diff.txt
          echo "âœ… Automated code review workflow completed successfully"