name: Cursor CLI ‚Äì PR Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Perform code review
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GH_TOKEN: ${{ github.token }}
        run: |
          cursor-agent --force --model "gpt-4" --output-format=text --print "You are operating in a GitHub Actions runner performing automated code review for a Java Spring Boot application. The gh CLI is available and authenticated via GH_TOKEN. You may comment on pull requests.

          Context:
          - Repo: ${{ github.repository }}
          - PR Number: ${{ github.event.pull_request.number }}
          - PR Head SHA: ${{ github.event.pull_request.head.sha }}
          - PR Base SHA: ${{ github.event.pull_request.base.sha }}
          - Technology Stack: Java 17, Spring Boot, Maven, JPA/Hibernate, Kafka, Docker

          Objectives:
          1) Re-check existing review comments and reply resolved when addressed
          2) Review the current PR diff focusing on Java/Spring Boot best practices
          3) Leave very short inline comments (1-2 sentences) on changed lines only and a brief summary at the end

          Procedure:
          - Get existing comments: gh pr view ${{ github.event.pull_request.number }} --json comments
          - Get diff: gh pr diff ${{ github.event.pull_request.number }}
          - If a previously reported issue appears fixed by nearby changes, reply: ‚úÖ This issue appears to be resolved by the recent changes
          - Avoid duplicates: skip if similar feedback already exists on or near the same lines

          Java/Spring Boot Focus Areas:
          - Security: SQL injection, XSS, authentication/authorization issues
          - Performance: N+1 queries, missing indices, inefficient loops
          - Spring Best Practices: Transaction boundaries, dependency injection, configuration
          - Error Handling: Proper exception handling, meaningful error messages
          - Data Validation: Input validation, null checks, bean validation
          - Testing: Unit test coverage, integration test patterns
          - Code Quality: SOLID principles, clean code practices
          - Resource Management: Connection pooling, memory leaks
          - API Design: REST conventions, proper HTTP status codes
          - Concurrency: Thread safety, race conditions

          Commenting rules:
          - Max 10 inline comments total; prioritize the most critical issues
          - One issue per comment; place on the exact changed line
          - Natural tone, specific and actionable; do not mention automated or high-confidence
          - Use emojis: üö® Critical üîí Security ‚ö° Performance ‚ö†Ô∏è Logic ‚úÖ Resolved ‚ú® Improvement üß™ Testing

          Submission:
          - Submit one review containing inline comments plus a concise summary
          - Use only: gh pr review ${{ github.event.pull_request.number }} --comment
          - Do not use: gh pr review --approve or --request-changes"
